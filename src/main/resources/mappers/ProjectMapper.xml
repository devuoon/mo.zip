<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mozip.domain.project.ProjectRepository">
    <resultMap id="projectDtoMap" type="com.mozip.dto.resp.project.ProjectListDto">
        <result property="id" column="ID"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="projectInfo" column="PROJECT_INFO"/>
        <result property="views" column="VIEWS"/>
    </resultMap>

    <resultMap id="recruitDtoMap" type="com.mozip.dto.resp.project.RecruitListDto">
        <result property="id" column="ID"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="projectInfo" column="PROJECT_INFO"/>
        <result property="views" column="VIEWS"/>
        <result property="status" column="STATUS"/>
        <result property="createTime" column="CREATED_AT"/>
    </resultMap>

    <resultMap id="ShowListDtoMap" type="com.mozip.dto.resp.project.ShowListDto">
        <result property="id"          column="ID"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="views"       column="VIEWS"/>
        <result property="isShow"      column="IS_SHOW"/>
        <result property="imageUrl" column="IMAGE_URL"/>
    </resultMap>

    <resultMap id="ShowDtoMap" type="com.mozip.dto.resp.project.ShowListDto">
        <result property="id" column="ID"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="views" column="VIEWS"/>
    </resultMap>

    <resultMap id="projectDetailMap" type="com.mozip.dto.resp.project.ProjectDetailDto">
        <result property="id" column="ID"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="status" column="STATUS"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="recruitCount" column="RECRUIT_COUNT"/>
        <result property="views" column="VIEWS"/>
        <result property="projectProcess" column="PROJECT_PROCESS"/>
        <result property="projectPurpose" column="PROJECT_PURPOSE"/>
        <result property="exceptTime" column="EXCEPT_TIME"/>
        <result property="exceptDate" column="EXCEPT_DATE"/>
        <result property="projectTime" column="PROJECT_TIME"/>
        <result property="projectInfo" column="PROJECT_INFO"/>
        <result property="ownerId" column="OWNER_ID"/>
    </resultMap>

    <!--  메인페이지 : 새로운 프로젝트  -->
    <select id="findNewProject" resultMap="projectDtoMap">
        <![CDATA[
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, PROJECT_INFO, VIEWS
        FROM PROJECT
        ORDER BY CREATED_AT DESC
            LIMIT 6
        ]]>
    </select>

    <!--  메인페이지 : 인기 프로젝트  -->
    <select id="findHotProject" resultMap="projectDtoMap">
        <![CDATA[
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, PROJECT_INFO, VIEWS
        FROM PROJECT
        ORDER BY VIEWS DESC
            LIMIT 6
        ]]>
    </select>

    <!--  메인페이지 : 모집역활  -->
    <select id="findRecruitRoles" resultType="java.lang.String">
        SELECT R.ROLE_NAME
        FROM PROJECT P
                 INNER JOIN RECRUIT_ROLE R ON P.ID = R.PROJECT_ID
        WHERE PROJECT_ID = #{projectId}
    </select>

    <!--  메인페이지 : 북마크 카운트  -->
    <select id="findBookmarkCount" resultType="int">
        SELECT COUNT(*)
        FROM PROJECT P
                 INNER JOIN BOOKMARK B ON P.ID = B.PROJECT_ID
        WHERE B.PROJECT_ID = #{projectId}
    </select>

    <!--  리스트페이지 : 모든 프로젝트  -->
    <select id="findAllProject" resultMap="recruitDtoMap">
        --         SELECT ID, PROJECT_NAME, PROJECT_INFO, PROJECT_TYPE, VIEWS, STATUS, CREATED_AT
--         FROM PROJECT
--         ORDER BY CREATED_AT DESC
        SELECT ID, PROJECT_NAME, PROJECT_INFO, PROJECT_TYPE, VIEWS, STATUS, CREATED_AT
        FROM PROJECT ORDERS
        WHERE IS_SHOW = 1
        ORDER BY CREATED_AT DESC LIMIT 10
        OFFSET #{page}
    </select>

    <!--  메인페이지 : 신청자 카운트  -->
    <select id="findSubscribeCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM SUBSCRIBE
                 INNER JOIN PROJECT ON SUBSCRIBE.PROJECT_ID = PROJECT.ID
        WHERE PROJECT.ID = #{projectId}
    </select>

    <!--  프로젝트자랑페이지 : 모든 프로젝트자랑  -->
    <select id="findAllShowProject" resultMap="ShowListDtoMap">
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, OWNER_ID, VIEWS, IS_SHOW, IMAGE_URL
        FROM PROJECT
        WHERE IS_SHOW = 0
    </select>

    <!--  프로젝트자랑페이지 : 새로운 프로젝트  -->
    <select id="findHotShow" resultMap="ShowListDtoMap">
        <![CDATA[
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, VIEWS, IS_SHOW, IMAGE_URL
        FROM PROJECT
        WHERE IS_SHOW = 0
        ORDER BY VIEWS DESC
            LIMIT 3
        ]]>
    </select>

    <!--  프로젝트자랑페이지 : 좋아요 카운트  -->
    <select id="findLikeCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM LIKES
                 INNER JOIN PROJECT ON LIKES.PROJECT_ID = PROJECT.ID
        WHERE PROJECT_ID = #{projectId}
    </select>

    <select id="findProjectDetail" resultMap="projectDetailMap">
        SELECT ID,
               PROJECT_TYPE,
               STATUS,
               PROJECT_NAME,
               CREATED_AT,
               RECRUIT_COUNT,
               VIEWS,
               PROJECT_PROCESS,
               PROJECT_PURPOSE,
               EXCEPT_TIME,
               EXCEPT_DATE,
               PROJECT_TIME,
               PROJECT_INFO,
               OWNER_ID
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <select id="findProjectMemberCount" resultType="int">
        SELECT COUNT(*)
        FROM MEMBER
        WHERE ID IN (SELECT PROJECT_MEMBER.MEMBER_ID
                     FROM PROJECT
                              INNER JOIN PROJECT_MEMBER  ON PROJECT.ID = PROJECT_MEMBER.PROJECT_ID
                     WHERE PROJECT.ID = #{projectId})
    </select>

    <select id="findOwnerInfo" resultType="com.mozip.dto.resp.project.ProjectMemberDto">
        SELECT ID,
               USERNAME,
               IFNULL(POSITION, '수정필요!'),
               IFNULL(CAREER, 0),
               PROFILE_IMAGE_URL,
               CREATED_AT
        FROM MEMBER
        WHERE ID = #{ownerId}
    </select>


    <select id="findProjectSkills" resultType="java.lang.String">
        SELECT PS.SKILL_NAME
        FROM PROJECT P
                 INNER JOIN PROJECT_SKILL PS ON P.ID = PS.PROJECT_ID
        WHERE P.ID = #{projectId}
    </select>

    <select id="findProjectRecruitRoles" resultType="java.lang.String">
        SELECT R.ROLE_NAME
        FROM PROJECT P
                 INNER JOIN RECRUIT_ROLE R ON P.ID = R.PROJECT_ID
        WHERE P.ID = #{projectId}
    </select>

    <select id="findProjectMembers" resultType="com.mozip.dto.resp.project.ProjectMemberDto">
        SELECT SUB.MEMBER_ID, USERNAME, IFNULL(M.POSITION, '수정필요!') AS POSITION, IFNULL(M.CAREER, 0) AS CAREER, M.PROFILE_IMAGE_URL, SUB.STIME
        FROM (SELECT SUBSCRIBE.MEMBER_ID, SUBSCRIBE.CREATED_AT AS STIME
              FROM SUBSCRIBE
                       INNER JOIN PROJECT ON PROJECT.ID = SUBSCRIBE.PROJECT_ID
              WHERE PROJECT_ID = #{projectId}) AS SUB
    INNER JOIN MEMBER M ON SUB.MEMBER_ID = M.ID
    </select>


    <!-- 프로젝트 자랑 상세페이지(show_detail) -->
    <resultMap id="ShowDetailDtoMap" type="com.mozip.dto.resp.project.ShowDetailDto">
        <result property="id" column="ID"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="modifiedShow" column="MODIFIED_SHOW"/>
        <result property="views" column="VIEWS"/>
        <result property="projectProcess" column="PROJECT_PROCESS"/>
        <result property="projectPurpose" column="PROJECT_PURPOSE"/>
        <result property="projectTime" column="PROJECT_TIME"/>
        <result property="recruitCount" column="RECRUIT_COUNT"/>
        <result property="projectInfo" column="PROJECT_INFO"/>
        <result property="ownerId" column="OWNER_ID"/>
        <result property="githubLink" column="GITHUB_LINK"/>
    </resultMap>

    <select id="findShowDetail" resultMap="ShowDetailDtoMap">
        SELECT ID,
               PROJECT_TYPE,
               PROJECT_NAME,
               CREATED_AT,
               MODIFIED_SHOW,
               VIEWS,
               PROJECT_PROCESS,
               PROJECT_PURPOSE,
               PROJECT_TIME,
               RECRUIT_COUNT,
               PROJECT_INFO,
               OWNER_ID,
               GITHUB_LINK
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <!-- 좋아요 카운트 -->
    <select id="findShowLikeCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM LIKES
                 INNER JOIN PROJECT ON LIKES.PROJECT_ID = PROJECT.ID
        WHERE PROJECT_ID = #{projectId}
    </select>

    <!--참여 인원수-->
    <select id="findShowMemberCount" resultType="int">
        SELECT COUNT(*)
        FROM MEMBER
        WHERE ID IN (SELECT PROJECT_MEMBER.MEMBER_ID
                     FROM PROJECT
                              INNER JOIN PROJECT_MEMBER  ON PROJECT.ID = PROJECT_MEMBER.PROJECT_ID
                     WHERE PROJECT.ID = #{projectId})
    </select>

    <!-- 작성자 프로필 정보 가져오기 / !! 프로필 url 추가 해야함 !! -->
    <select id="findShowOwnerInfo" resultType="com.mozip.dto.resp.project.ProjectMemberDto">
        SELECT P.ID, USERNAME, POSITION, CAREER, M.PROFILE_IMAGE_URL, M.CREATED_AT
        FROM MEMBER M
                 INNER JOIN PROJECT P ON M.ID = P.OWNER_ID
        WHERE P.ID = #{projectId}
          AND P.OWNER_ID = #{ownerId}
    </select>

    <!-- 기술 스택 가져오기 -->
    <select id="findShowSkills" resultType="java.lang.String">
        SELECT PS.SKILL_NAME
        FROM PROJECT P
                 INNER JOIN PROJECT_SKILL PS ON P.ID = PS.PROJECT_ID
        WHERE P.ID = #{projectId}
    </select>

    <!-- 모집 분야 가져오기 -->
    <select id="findShowRecruitRoles" resultType="java.lang.String">
        SELECT R.ROLE_NAME
        FROM PROJECT P
                 INNER JOIN RECRUIT_ROLE R ON P.ID = R.PROJECT_ID
        WHERE P.ID = #{projectId}
    </select>

    <insert id="createProject" parameterType="com.mozip.dto.req.project.ProjectCreateDto">
        INSERT INTO PROJECT (PROJECT_NAME, PROJECT_TYPE, SUBJECT,
                             RECRUIT_COUNT, PROJECT_PURPOSE, PROJECT_TIME,
                             PROJECT_PROCESS, EXCEPT_DATE, EXCEPT_TIME, OWNER_ID, PROJECT_INFO, STATUS, CREATED_AT,
                             VIEWS, IMAGE_URL)
        VALUES (#{dto.projectName}, #{dto.projectType}, #{dto.subject},
                #{dto.recruitCount}, #{dto.projectPurpose}, #{dto.projectTime},
                #{dto.projectProcess}, #{dto.exceptDate}, #{dto.exceptTime}, #{dto.ownerId},
                #{dto.projectInfo}, 1, NOW(), 0, #{img})
    </insert>

    <insert id="createProjectSkill">
        INSERT INTO PROJECT_SKILL (SKILL_NAME, PROJECT_ID)
        VALUES (#{skill}, #{id})
    </insert>

    <insert id="createRecruitRole">
        INSERT INTO RECRUIT_ROLE (PROJECT_ID, ROLE_NAME)
        VALUES (#{id}, #{role})
    </insert>

    <select id="findProjectId" resultType="java.lang.Integer">
        SELECT ID
        FROM PROJECT
        WHERE PROJECT_NAME = #{projectName}
    </select>

    <select id="findProjectName" resultType="java.lang.String">
        SELECT PROJECT_NAME
        FROM PROJECT
        WHERE PROJECT_NAME = #{projectName}
    </select>

    <!-- 조회수 올리기 -->
    <update id="findViewCount" parameterType="int">
        UPDATE PROJECT
        SET VIEWS = VIEWS + 1
        WHERE ID = #{projectId}
    </update>

    <!--  프로젝트자랑 삭제  -->
    <delete id="deleteProject" parameterType="int">
        DELETE FROM PROJECT WHERE ID = #{projectId}
    </delete>

    <!-- 프로젝트자랑: 좋아요 삭제-->
    <delete id="deleteProjectLikes" parameterType="int">
        DELETE
        FROM LIKES
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!-- 프로젝트자랑 수정 : 기존 데이터 갖고오기 -->
    <select id="editSelectShow" resultType="com.mozip.dto.req.project.ShowEditDto">
        SELECT ID,
               PROJECT_TYPE,
               PROJECT_NAME,
               CREATED_AT,
               MODIFIED_SHOW,
               RECRUIT_COUNT,
               PROJECT_PROCESS,
               PROJECT_PURPOSE,
               PROJECT_TIME,
               PROJECT_INFO
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <!-- 프로젝트자랑 수정 : 프로젝트 데이터 수정 -->
    <update id="updateShow" parameterType="com.mozip.dto.req.project.ShowEditDto">
        UPDATE PROJECT
        SET PROJECT_TYPE    = #{dto.projectType},
            PROJECT_NAME    = #{dto.projectName},
            CREATED_AT      = #{dto.createdAt},
            MODIFIED_SHOW   = #{dto.modifiedShow},
            RECRUIT_COUNT   = #{dto.recruitCount},
            PROJECT_PROCESS = #{dto.projectProcess},
            PROJECT_PURPOSE = #{dto.projectPurpose},
            PROJECT_TIME    = #{dto.projectTime},
            PROJECT_INFO    = #{dto.projectInfo}
        WHERE ID = #{dto.id}
    </update>

    <!-- 프로젝트모집 상세 : 모집완료 여부 체크 -->
    <select id="recruitDoneCheck" resultType="int">
        SELECT STATUS
        FROM PROJECT
        WHERE ID=#{projectId}
    </select>

    <!-- 프로젝트모집 상세 : 모집완료 -->
    <update id="recruitDoneSuccess" parameterType="int">
        UPDATE PROJECT
        SET STATUS = 0
        WHERE ID = #{projectId}
    </update>

    <!-- 프로젝트모집 상세 : 모집완료 취소 -->
    <update id="recruitDoneCancle" parameterType="int">
        UPDATE PROJECT
        SET STATUS = 1
        WHERE ID = #{projectId}
    </update>

    <!-- 프로젝트모집 수정 : 권한체크 -->
    <select id="findOwnerId" resultType="int">
        SELECT ID
        FROM PROJECT
        WHERE ID=#{projectId} AND OWNER_ID=#{memberId}
    </select>

    <!-- 프로젝트모집 수정 : 기존 데이터 갖고오기 -->
    <select id="findProjectEditDetail" resultMap="projectOrigin">
        SELECT ID,
               SUBJECT,
               PROJECT_TYPE,
               PROJECT_NAME,
               RECRUIT_COUNT,
               PROJECT_PURPOSE,
               PROJECT_TIME,
               PROJECT_PROCESS,
               EXCEPT_DATE,
               EXCEPT_TIME,
               PROJECT_INFO
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <resultMap id="projectOrigin" type="com.mozip.dto.req.project.ProjectEditDto">
        <result property="id" column="ID"/>
        <result property="subject" column="SUBJECT"/>
        <result property="projectType" column="PROJECT_TYPE"/>
        <result property="projectName" column="PROJECT_NAME"/>
        <result property="recruitCount" column="RECRUIT_COUNT"/>
        <result property="projectPurpose" column="PROJECT_PURPOSE"/>
        <result property="projectTime" column="PROJECT_TIME"/>
        <result property="projectProcess" column="PROJECT_PROCESS"/>
        <result property="exceptDate" column="EXCEPT_DATE"/>
        <result property="exceptTime" column="EXCEPT_TIME"/>
        <result property="projectInfo" column="PROJECT_INFO"/>
    </resultMap>

    <!-- 프로젝트모집 수정 : 프로젝트 데이터 수정 -->
    <update id="updateRecruitProject" parameterType="com.mozip.dto.req.project.ProjectEditDto">
        UPDATE PROJECT
        SET PROJECT_TYPE    = #{dto.projectType},
            PROJECT_NAME    = #{dto.projectName},
            SUBJECT         = #{dto.subject},
            RECRUIT_COUNT   = #{dto.recruitCount},
            PROJECT_PURPOSE = #{dto.projectPurpose},
            PROJECT_TIME    = #{dto.projectTime},
            PROJECT_PROCESS = #{dto.projectProcess},
            EXCEPT_DATE     = #{dto.exceptDate},
            EXCEPT_TIME     = #{dto.exceptTime},
            PROJECT_INFO    = #{dto.projectInfo}
        WHERE ID = #{dto.id}
    </update>

    <!-- 프로젝트모집 수정 : 프로젝트 스킬 -->
    <insert id="updateProjectSkills">
        INSERT INTO PROJECT_SKILL (SKILL_NAME, PROJECT_ID)
        VALUES (#{skill}, #{projectId})
    </insert>

    <!-- 프로젝트모집 수정 : 모집역할 -->
    <insert id="updateProjectRecruitRoles">
        INSERT INTO RECRUIT_ROLE (PROJECT_ID, ROLE_NAME)
        VALUES (#{projectId}, #{role})
    </insert>

    <!-- 프로젝트 스킬 삭제 -->
    <delete id="deleteProjectSkills" parameterType="int">
        DELETE
        FROM PROJECT_SKILL
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!-- 프로젝트 모집역할 삭제 -->
    <delete id="deleteProjectRecruitRoles" parameterType="int">
        DELETE
        FROM RECRUIT_ROLE
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!--프로젝트 북마크 삭제-->
    <delete id="deleteProjectBookmark" parameterType="int">
        DELETE
        FROM BOOKMARK
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!--프로젝트 참여 맴버 삭제-->
    <delete id="deleteProjectMembers" parameterType="int">
        DELETE
        FROM PROJECT_MEMBER
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!--프로젝트 신청목록 삭제-->
    <delete id="deleteProjectSubscribe" parameterType="int">
        DELETE
        FROM SUBSCRIBE
        WHERE PROJECT_ID = #{projectId}
    </delete>

    <!-- 프로젝트모집 프로젝트 신청 -->
    <insert id="projectJoin">
        INSERT INTO SUBSCRIBE (PROJECT_ID, MEMBER_ID, CREATED_AT)
        VALUES (#{projectId}, #{memberId}, NOW())
    </insert>

    <!-- 프로젝트모집 프로젝트 신청 멤버 가져오기 -->
    <select id="findOneJoinMember" resultType="com.mozip.dto.resp.project.ProjectMemberDto">
        SELECT M.ID, M.USERNAME, M.POSITION, M.CAREER, M.PROFILE_IMAGE_URL, M.CREATED_AT
        FROM SUBSCRIBE S
                 INNER JOIN MEMBER M ON S.MEMBER_ID = M.ID
        WHERE PROJECT_ID = #{projectId}
          AND MEMBER_ID = #{memberId}
    </select>

    <!--  멤버모집리스트 검색하기  -->
    <select id="searchProject" resultMap="recruitDtoMap">
        SELECT P.ID,
               P.PROJECT_NAME,
               P.PROJECT_TYPE,
               P.PROJECT_INFO,
               P.VIEWS,
               P.STATUS,
               P.CREATED_AT
        FROM PROJECT P
        WHERE (P.PROJECT_NAME LIKE CONCAT('%', #{keyword}, '%')
            OR P.PROJECT_INFO LIKE CONCAT('%', #{keyword}, '%'))
          AND IS_SHOW = 1

        ORDER BY CREATED_AT DESC LIMIT 10
        OFFSET #{page}
    </select>

    <!--  프로젝트자랑리스트 검색하기  -->
    <select id="searchShow" resultMap="ShowListDtoMap">
        SELECT P.ID, P.PROJECT_NAME, P.PROJECT_TYPE,
               P.VIEWS, P.IS_SHOW,P.IMAGE_URL
        FROM PROJECT P
        WHERE P.PROJECT_NAME LIKE CONCAT('%', #{keyword}, '%')
        AND  IS_SHOW = 0
        ORDER BY CREATED_AT DESC
    </select>

    <select id="findProjectMemberIdList" resultType="java.lang.Integer">
        SELECT MEMBER_ID
        FROM PROJECT_MEMBER
        WHERE PROJECT_ID = #{projectId}
    </select>

    <!-- 각 필터에 따른 검색 쿼리 -->
    <select id="filterSearch" resultType="java.lang.Integer">
        SELECT P.ID
        FROM PROJECT P
                 INNER JOIN RECRUIT_ROLE PR ON P.ID = PR.PROJECT_ID
        WHERE ROLE_NAME LIKE CONCAT('%', #{filter}, '%')
          AND IS_SHOW = 1
        ORDER BY CREATED_AT DESC LIMIT 10
        OFFSET #{page}
    </select>

    <!-- 각 셀렉트 필터에 따른 검색 쿼리 -->
    <select id="selectFilter" resultType="java.lang.Integer">
        SELECT ID
        FROM PROJECT
        WHERE STATUS = #{filter}
          AND IS_SHOW = 1
        ORDER BY CREATED_AT DESC LIMIT 10
        OFFSET #{page}
    </select>

    <!-- 프로젝트타입(사이드, 스터디or모입)에 따른 검색 쿼리 -->
    <select id="projectTypeFilter" resultType="java.lang.Integer">
        SELECT ID
        FROM PROJECT
        WHERE PROJECT_TYPE = #{filter}
          AND IS_SHOW = 1
        ORDER BY CREATED_AT DESC LIMIT 10
        OFFSET #{page}
    </select>

    <select id="findOneRecruit" resultMap="recruitDtoMap">
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, PROJECT_INFO, VIEWS, STATUS, CREATED_AT
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <update id="baseProjectImg">
        UPDATE PROJECT
        SET IMAGE_URL=#{image}
        WHERE ID = #{projectId}
    </update>

    <select id="projectSkillFilter" resultMap="ShowListDtoMap">
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, OWNER_ID, VIEWS, IS_SHOW, IMAGE_URL
        FROM PROJECT
        WHERE PROJECT.ID IN (SELECT PROJECT_ID FROM PROJECT_SKILL WHERE SKILL_NAME LIKE #{filter})
          AND IS_SHOW = 0
    </select>

    <select id="saveConditionSelect" resultMap="ShowListDtoMap">
            SELECT P.ID,
                   P.PROJECT_NAME,
                   P.PROJECT_TYPE,
                   P.VIEWS,
                   P.IS_SHOW,
                   P.IMAGE_URL
            FROM PROJECT P
                     INNER JOIN (
                SELECT COUNT(*) AS 북마크_갯수, PROJECT_ID
                FROM BOOKMARK
                GROUP BY PROJECT_ID
            ) B ON P.ID = B.PROJECT_ID
            ORDER BY B.북마크_갯수 DESC;
    </select>

    <select id="newConditionSelect" resultMap="ShowListDtoMap">
            SELECT ID,
                   PROJECT_NAME,
                   PROJECT_TYPE,
                   VIEWS,
                   IS_SHOW,
                   IMAGE_URL
            FROM PROJECT
            WHERE IS_SHOW = 0 AND IS_END = 0 AND STATUS = 0
            ORDER BY CREATED_AT DESC
    </select>

    <select id="oldConditionSelect" resultMap="ShowListDtoMap">
            SELECT ID,
                   PROJECT_NAME,
                   PROJECT_TYPE,
                   VIEWS,
                   IS_SHOW,
                   IMAGE_URL
            FROM PROJECT
            WHERE IS_SHOW = 0 AND IS_END = 0 AND STATUS = 0
            ORDER BY CREATED_AT
    </select>
  
    <select id="findProjectListById" resultMap="ShowListDtoMap">
        SELECT ID, PROJECT_NAME, PROJECT_TYPE, OWNER_ID, VIEWS, IS_SHOW, IMAGE_URL
        FROM PROJECT
        WHERE IS_SHOW = 1
          AND STATUS = 0
          AND OWNER_ID = #{memberId};
    </select>

    <delete id="deleteByOwnerId" parameterType="int">
        DELETE
        FROM PROJECT
        WHERE OWNER_ID = #{memberId}
    </delete>

    <select id="findProjectOwnerById" resultType="int">
        SELECT OWNER_ID
        FROM PROJECT
        WHERE ID = #{projectId}
    </select>

    <update id="updateProjectToShow">
        UPDATE PROJECT
        SET GITHUB_LINK = #{dto.githubUrl},
            IS_SHOW     = 0,
            MODIFIED_SHOW = now()
        WHERE ID = #{dto.projectId}
    </update>
</mapper>
